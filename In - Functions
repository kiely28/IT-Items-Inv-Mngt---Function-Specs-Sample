102325

Sure üëç Here‚Äôs a sample Function Specification document for your ‚ÄúIT Items Inventory Management ‚Äì In Module‚Äù (based on the screenshot you shared).
You can use this format for other modules too (like Out, Transfer, QR Printing, etc.).


---

üß© FUNCTION SPECIFICATION

Module: In (Receiving / Adding New Inventory Items)

System: IT Items Inventory Management

Page: editmeeting.aspx (Transaction ‚Üí In)


---

1. Function Overview

The In Function is responsible for adding new IT items into the inventory system. It captures essential item details such as category, serial number, brand/model, location, and quantity. This ensures accurate tracking, categorization, and reporting of assets.


---

2. Process Flow

1. User navigates to Transaction ‚Üí In.


2. User scans or inputs the Category Code.


3. System automatically generates or loads the corresponding Control No.


4. User inputs the following required fields:

Brand/Model

Serial No

Quantity/Length

Location Stored



5. User clicks Save to List to temporarily store the item in a grid or list for review.


6. Once all items are added, user can finalize the transaction to save data into the database.


7. User may also Clear fields to reset or List to view saved records.




---

3. Field Specifications

Field Name	Type/Control	Required	Description

Category Code	TextBox / Scan	‚úÖ Yes	Refers to the classification of the item (e.g., LAPTOP, CABLE).
Control No	Auto-generated / TextBox	‚úÖ Yes	Unique identifier for each transaction batch.
Brand/Model	TextBox	‚úÖ Yes	The brand and model of the IT item.
Serial No	TextBox / Scan	‚úÖ Yes	The unique serial number of the item. Prevents duplicates.
Quantity/Length	Numeric TextBox	‚úÖ Yes	Quantity or total length of the item (depending on UOM).
Location Stored	Dropdown / TextBox	‚úÖ Yes	Indicates the current storage or installation location.



---

4. Validation Rules

All required fields (*) must be filled before saving.

Serial No must be unique within the same Control No.

Quantity/Length must be greater than zero.

Category Code must exist in the Category Master table.

System prevents duplicate entries (same Serial No and Control No).



---

5. Database Interaction

Stored Procedure: sp_InsertItemIn

Input Parameters:

@ControlNo

@CategoryCode

@BrandModel

@SerialNo

@Quantity

@LocationStored

@CreatedBy


Output:

Success message or error code for duplicate/invalid data.


Tables Involved:

tbl_ItemIn ‚Äì stores the main transaction details

tbl_Category ‚Äì reference for category validation

tbl_Location ‚Äì reference for location codes



---

6. Error Handling

Scenario	System Response

Missing required field	Show message: ‚ÄúPlease fill all required fields.‚Äù
Duplicate serial detected	Show message: ‚ÄúSerial No already exists under this Control No.‚Äù
Database error	Show message: ‚ÄúUnable to save data. Please contact admin.‚Äù



---

7. Buttons and Actions

Button	Description

List	Redirects to list view of existing ‚ÄúIn‚Äù transactions.
Clear	Clears all input fields for new entry.
Save to List	Validates and temporarily stores data for review before final save.



---

8. Output / Result

Item successfully added to temporary list or permanently stored in tbl_ItemIn.

System displays confirmation: ‚ÄúItem successfully added to list.‚Äù

User can view all records in List View with generated Control No and timestamp.



---

9. Future Enhancements (Optional)

Auto QR code generation for each Control No.

Integration with Transfer and Out modules.

Print/export function for ‚ÄúIn‚Äù transaction summary.

LDAP-based user authentication and activity logging.



---

Would you like me to make a version formatted for documentation (like a .docx or .pdf layout for your system folder)?
I can generate it automatically.


--

Perfect ‚Äî that‚Äôs an important detail. üëç
Let‚Äôs update your Function Specification to include that logic: when the UOM (Unit of Measure) from tbl_category is "pc", the Quantity/Length field is automatically set to 1 and made read-only (cannot be edited).

Here‚Äôs the revised version of the Function Specification (Input & Output) for your In / Receiving module, including that rule:


---

Function Specification Document

Module: In / Receiving

Program File: In.aspx / In.aspx.cs

System: IT Items Inventory Management

Developer: [Your Name]

Date: [Date Created]


---

1. Module Description

The In/Receiving Module records newly received IT items into the system.
Each record includes details such as category, brand/model, serial number, quantity/length, and location.
The Control No is automatically generated by the system, and the warranty validity is computed from the category‚Äôs default warranty period stored in tbl_category.period.

Additionally, the Quantity/Length behavior depends on the Unit of Measure (UOM) defined in tbl_category.uom.


---

2. Input Specification

Input Field	Source	Description	Validation / Rules	Example

Category Code	User (scanner)	Code scanned by user representing the item‚Äôs category.	Required. Must exist in tbl_category.	NT-AT
Brand/Model	User (scanner)	Model or brand name of the item.	Required.	Panasonic KX-TS880
Serial No	User (scanner)	Unique serial number of the item.	Required. Must not duplicate existing serial in tbl_in.	SN123456789
Quantity/Length	System or User	Quantity of the item. Value and behavior depend on UOM from tbl_category.	If UOM = "pc", auto-set to 1 and disable editing.<br>If UOM ‚â† "pc", allow user to input numeric value.	1 or 300
Location Stored	User (scanner)	Storage location (Warehouse, Office, etc.).	Required. Must exist in tbl_location.	WH-A1
Control No	System-generated	Automatically created unique number per transaction.	Auto-generated, unique per batch.	IN20251026-0001
Warranty Period	System (from DB)	Pulled from tbl_category.period.	Auto-fetched after category scan.	3 (years)
Expiration Date	System (derived)	Computed as CurrentDate + WarrantyPeriod.	Auto-calculated.	2028-10-26



---

3. Processing Logic (Input Flow)

1. User scans Category Code.

System retrieves period, uom, and other details from tbl_category.


SELECT period, uom FROM tbl_category WHERE category_code = @CategoryCode


2. System sets Quantity/Length behavior:

If uom = 'pc':

Quantity/Length textbox = 1

Textbox is disabled (read-only).


Else:

Textbox is enabled and must be filled manually by user (numeric only).




3. User scans Brand/Model, Serial No, and Location Stored.


4. System generates Control No automatically (e.g. IN20251026-0001).


5. System calculates Expiration Date:

ExpirationDate = DateTime.Now.AddYears(Convert.ToInt32(Period));


6. Data is saved into tbl_in table with:

Control No

Category Code

Brand/Model

Serial No

Quantity/Length (based on UOM rule)

Location Stored

Date Received

Warranty Period

Expiration Date



7. Duplicate Serial Validation:

If serial number exists in tbl_in, show message:
‚ö†Ô∏è ‚ÄúDuplicate Serial No detected. Please verify the scanned item.‚Äù





---

4. Output Specification

Output	Description

Success Message	‚ÄúItem successfully added to list.‚Äù
Error Message	Validation or duplicate serial errors.
List View Table	Displays saved transactions with: Control No, Category, Brand/Model, Serial No, Quantity, Location, Date Received, Expiration Date.
Auto-Filled Fields	Quantity (if UOM = pc), Warranty Period, Expiration Date, Control No.



---

5. Database Interaction

Primary Table: tbl_in

Field Name	Type	Description

control_no	varchar(20)	Auto-generated Control No
category_code	varchar(20)	FK to tbl_category
brand_model	varchar(100)	Model or brand name
serial_no	varchar(50)	Unique serial number
quantity	int	Derived from UOM rule
location_stored	varchar(50)	Where the item is stored
date_received	datetime	Current date/time
warranty_period	int	Value from tbl_category.period
expiration_date	datetime	Calculated (Now + Period)


Reference Table: tbl_category

Field Name	Type	Description

category_code	varchar(20)	Unique category identifier
category_name	varchar(100)	Category description
period	int	Warranty period (years)
uom	varchar(10)	Unit of measure (e.g. pc, box, m, set)



---

6. Example Scenarios

Scenario 1: Single Item (pc)

Category Code	UOM	Period	Result

NT-AT	pc	3	Quantity auto = 1, Expiration = Now + 3 years


Record Example:

Field	Value

Control No	IN20251026-0001
Category Code	NT-AT
Brand/Model	Panasonic KX-TS880
Serial No	SN123456789
Quantity	1
Location Stored	WH-A1
Date Received	2025-10-26
Warranty Period	3 years
Expiration Date	2028-10-26



---

Scenario 2: Measured Item (m or box)

Category Code	UOM	Period	Result

CAB-LAN	m	2	User inputs quantity manually (e.g. 300m), Expiration = Now + 2 years



---

Would you like me to include the stored procedure (sp_SaveInItem) logic next ‚Äî with automatic control number generation, UOM check, and warranty expiration computation?
